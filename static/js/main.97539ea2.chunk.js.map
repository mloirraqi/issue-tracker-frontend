{"version":3,"sources":["views/pages/common/footer/AppFooter.js","views/pages/common/header/AppHeaderDropdown.js","views/pages/common/header/AppHeader.js","App.js","serviceWorker.js","index.js"],"names":["AppFooter","className","React","memo","AppHeaderDropdown","useState","openIssueCount","closeIssueCount","variant","placement","caret","src","size","icon","cilEnvelopeOpen","color","cilEnvelopeClosed","href","cilUser","AppHeader","position","fluid","to","cibAnalogue","height","alt","component","NavLink","activeClassName","cilBell","loading","Login","lazy","Register","NewProject","Project","Home","App","Suspense","fallback","exact","path","name","render","props","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.97539ea2.chunk.js","sourcesContent":["import React from 'react'\nimport { CFooter } from '@coreui/react'\n\nconst AppFooter = () => {\n    return (\n        <CFooter>\n            <div>\n                <span className=\"ms-1\">&copy; 2021 MLOI</span>\n            </div>\n        </CFooter>\n    )\n}\n\nexport default React.memo(AppFooter)\n","import React, {useState} from 'react'\nimport {\n    CAvatar,\n    CBadge,\n    CDropdown,\n    CDropdownDivider,\n    CDropdownHeader,\n    CDropdownItem,\n    CDropdownMenu,\n    CDropdownToggle,\n} from '@coreui/react'\nimport {\n    cilBell,\n    cilCreditCard,\n    cilCommentSquare,\n    cilEnvelopeOpen,\n    cilFile,\n    cilLockLocked,\n    cilSettings,\n    cilTask,\n    cilEnvelopeClosed,\n    cilUser,\n} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\n\nconst AppHeaderDropdown = () => {\n    const [openIssueCount] = useState(20);\n    const [closeIssueCount] = useState(40);\n\n    return (\n        <CDropdown variant=\"nav-item\">\n            <CDropdownToggle placement=\"bottom-end\" className=\"py-0\" caret={false}>\n                <CAvatar src={'https://icon-library.com/images/avatar-icon-images/avatar-icon-images-4.jpg'} size=\"md\" />\n            </CDropdownToggle>\n            <CDropdownMenu className=\"pt-0\" placement=\"bottom-end\">\n                <CDropdownHeader className=\"bg-light fw-semibold py-2\">Issues</CDropdownHeader>\n                <CDropdownItem>\n                    <CIcon icon={cilEnvelopeOpen} className=\"me-2\" />\n                    Open\n                    <CBadge color=\"success\" className=\"ms-2\">\n                        {openIssueCount}\n                    </CBadge>\n                </CDropdownItem>\n                <CDropdownItem>\n                    <CIcon icon={cilEnvelopeClosed} className=\"me-2\" />\n                    Close\n                    <CBadge color=\"danger\" className=\"ms-2\">\n                        {closeIssueCount}\n                    </CBadge>\n                </CDropdownItem>\n                <CDropdownHeader className=\"bg-light fw-semibold py-2\">Account</CDropdownHeader>\n                <CDropdownItem href=\"/profile\">\n                    <CIcon icon={cilUser} className=\"me-2\" />\n                    Profile\n                </CDropdownItem>\n            </CDropdownMenu>\n        </CDropdown>\n    )\n}\n\nexport default AppHeaderDropdown\n","import React, {useState} from 'react'\nimport { NavLink } from 'react-router-dom'\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderDivider,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavLink,\n  CNavItem,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilBell, cilEnvelopeOpen, cilList, cilMenu } from '@coreui/icons'\n\nimport {cibAnalogue} from '@coreui/icons'\n\nimport AppHeaderDropdown from './AppHeaderDropdown'\n\nconst AppHeader = () => {\n  const [visibility,setVisibility] = useState(true);\n\n  return (\n    <CHeader position=\"sticky\" className=\"mb-4\">\n      <CContainer fluid>\n        <CHeaderBrand className=\"mx-auto d-md-none\" to=\"/\">\n          <CIcon icon={cibAnalogue} height={48} alt=\"Logo\" />\n        </CHeaderBrand>\n        <CHeaderNav className=\"d-none d-md-flex me-auto\">\n          <CNavItem>\n            <CNavLink to=\"/\" component={NavLink} activeClassName=\"active\">\n              All Projects\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink to=\"/profile\" component={NavLink} activeClassName=\"active\">\n              Profile\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink to=\"/notifications\" component={NavLink} activeClassName=\"active\">\n              Notifications\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink to=\"/new\" component={NavLink} activeClassName=\"active\">\n              New Project\n            </CNavLink>\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav>\n          <CNavItem>\n            <CNavLink href=\"/notifications\">\n              <CIcon icon={cilBell} size=\"lg\" />\n            </CNavLink>\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav className=\"ms-3\">\n          <AppHeaderDropdown />\n        </CHeaderNav>\n      </CContainer>\n      <CHeaderDivider />\n    </CHeader>\n  )\n}\n\nexport default AppHeader\n\n","import React, {Component} from 'react'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport './scss/style.scss'\nimport AppHeader from \"./views/pages/common/header/AppHeader\";\nimport AppFooter from \"./views/pages/common/footer/AppFooter\";\n\nconst loading = (\n    <div className=\"pt-3 text-center\">\n        <div className=\"sk-spinner sk-spinner-pulse\"/>\n    </div>\n)\n\nconst Login = React.lazy(() => import('./views/pages/login/Login'))\nconst Register = React.lazy(() => import('./views/pages/register/Register'))\nconst NewProject = React.lazy(() => import('./views/pages/project/NewProject'))\nconst Project = React.lazy(() => import('./views/pages/project/Project'))\nconst Home = React.lazy(() => import('./views/pages/home/Home'))\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <React.Suspense fallback={loading}>\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/login\"\n                            name=\"Login Page\"\n                            render={(props) => <Login {...props} />}/>\n                        <Route\n                            exact\n                            path=\"/register\"\n                            name=\"Register Page\"\n                            render={(props) => <Register {...props} />}/>\n                        <Route\n                            exact\n                            path=\"/\"\n                            name=\"Home\"\n                            render={(props) => <Home {...props} />}/>\n                        <Route\n                            exact\n                            path=\"/project/:projectId\"\n                            name=\"Project\"\n                            render={(props) => <Project {...props} />}/>\n                        <Route\n                            exact\n                            path=\"/new\"\n                            name=\"New project\"\n                            render={(props) => <NewProject {...props} />}/>\n                    </Switch>\n                </React.Suspense>\n            </Router>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://goo.gl/SC7cgQ',\n                    )\n                })\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.')\n\n                            // Execute callback\n                            if (config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') === -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister()\n        })\n    }\n}\n","import 'react-app-polyfill/stable'\nimport 'core-js'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}