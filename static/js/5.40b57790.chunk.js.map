{"version":3,"sources":["api/http.js","views/pages/project/NewProject.js","views/pages/issue/NewIssue.js","views/pages/project/AllProjects.js","views/pages/home/Home.js"],"names":["url","http","axios","create","baseURL","paramsSerializer","params","qs","stringify","indices","interceptors","request","use","config","jwt","localStorage","getItem","undefined","headers","error","Promise","reject","response","status","this","parseError","data","messages","parseBody","console","warn","Array","CustomStyles","useHistory","useState","name","setName","description","setDescription","source","setSource","validated","setValidated","className","noValidate","onSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","post","then","res","window","location","alert","md","type","placeholder","required","onChange","e","target","value","rows","xs","color","NewProject","popupCss","popup","NewIssue","projectId","onComplete","setUsername","message","setMessage","icon","cilBug","cilUser","onClick","issues","AllProjects","history","columns","title","dataIndex","copyable","render","date","moment","format","push","pathname","useEffect","get","setData","modal","setModal","visible","onDismiss","filterType","size","dataSource","rowKey","pagination","defaultCurrent","Home"],"mappings":"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","file":"static/js/5.40b57790.chunk.js","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\n\nlet url = \"http://localhost:8080\"\n\nif(process.env.NODE_ENV === 'development') {\n    url = \"http://localhost:8080\"\n}\nif(process.env.NODE_ENV === 'production') {\n    //todo: heroku url\n    url = \"http://localhost:8080\"\n}\n\nfunction parseError(messages) {\n    if (messages) {\n        if (messages instanceof Array) {\n            return Promise.reject({messages: messages})\n        } else {\n            return Promise.reject({messages: [messages]})\n        }\n    } else {\n        return Promise.reject({messages: [\"--error--\"]})\n    }\n}\n\nfunction parseBody(response) {\n    if (response.status === 200) {\n        return response\n    } else {\n        return this.parseError(response.data.messages)\n    }\n}\n\nlet http = axios.create({\n    baseURL: url,\n    paramsSerializer: function (params) {\n        return qs.stringify(params, {indices: false})\n    }\n})\n\nhttp.interceptors.request.use((config) => {\n    let jwt = localStorage.getItem(\"jwt\");\n    if (jwt !== null && jwt !== undefined) {\n        config.headers = {'Authorization': 'Bearer ' + jwt}\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\nhttp.interceptors.response.use((response) => {\n    return parseBody(response)\n}, error => {\n    console.warn('Error status', error.response)\n    if (error.response) {\n        return parseError(error.response)\n    } else {\n        return Promise.reject(error)\n    }\n})\n\nexport default http\n","import React, {useState} from 'react'\nimport {CButton, CCard, CCardBody, CCardHeader, CCol, CForm, CFormInput, CFormLabel, CRow, CFormTextarea} from '@coreui/react'\nimport http from \"../../../api/http\";\nimport {useHistory} from \"react-router-dom\";\n\nconst CustomStyles = () => {\n    const history = useHistory();\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const [source, setSource] = useState('');\n    const [validated, setValidated] = useState(false)\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        event.stopPropagation()\n\n        const form = event.currentTarget\n        if (form.checkValidity() !== false) {\n            http\n                .post('/project/create', {name, description, source})\n                .then((res) => {\n                    if (res.data) {\n                        window.location = \"/\";\n                        //history.push(\"/\");\n                    } else {\n                        alert(\"Project Creation Failed\")\n                    }\n                })\n        }\n        setValidated(true)\n    }\n    return (\n        <CForm\n            className=\"row needs-validation\"\n            noValidate\n            validated={validated}\n            onSubmit={handleSubmit}\n        >\n            <CCol md={12}>\n                <CFormLabel>Project Name</CFormLabel>\n                <CFormInput type=\"text\" placeholder=\"Issue Tracker\" required onChange={(e) => setName(e.target.value)}/>\n            </CCol>\n            <CCol md={12} className={\"btn-padding\"}>\n                <CFormLabel>Description</CFormLabel>\n                <CFormTextarea type=\"text\"\n                            rows={10}\n                            placeholder=\"Issue Tracker let's you track project related issues. Developed with React.js and Spring Boot\"\n                            onChange={(e) => setDescription(e.target.value)}\n                            required/>\n            </CCol>\n            <CCol md={12} className={\"btn-padding\"}>\n                <CFormLabel>Source</CFormLabel>\n                <CFormInput type=\"text\" placeholder=\"www.github.com/\" onChange={(e) => setSource(e.target.value)}/>\n            </CCol>\n            <CCol xs={12} className={\"btn-padding\"}>\n                <CButton color=\"primary\" type=\"submit\">\n                    Create Project\n                </CButton>\n            </CCol>\n        </CForm>\n    )\n}\n\nconst NewProject = ({popup}) => {\n    const popupCss = popup ?  \"\" : \"right-new-issue\"\n    return (\n        <div className={\"align-items-center margin-new \" +popupCss}>\n            <CRow>\n                <CCol xs={12}>\n                    <CCard className=\"mb-4\">\n                        <CCardHeader>\n                            <strong>Create Project</strong> <small>To get started with a new project, simply fill up the\n                            details</small>\n                        </CCardHeader>\n                    </CCard>\n                </CCol>\n            </CRow>\n            <CustomStyles/>\n        </div>\n\n    )\n}\n\nexport default NewProject\n","import React, {useState} from 'react'\nimport {CButton, CCard, CCardBody, CCol, CForm, CFormInput, CInputGroup, CInputGroupText, CRow} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {cilBug, cilUser} from \"@coreui/icons\";\nimport http from \"../../../api/http\";\n\nconst NewIssue = ({projectId, onComplete}) => {\n    const [username, setUsername] = useState('');\n    const [message, setMessage] = useState('');\n\n    const createIssue = () => {\n        http\n            .post('issue/create/', {projectId, issues: [{message}]})\n            .then((res) => {\n                if (res.data === true) onComplete(true)\n            })\n    }\n\n    return (\n        <CCard className=\"p-4\">\n            <CCardBody>\n                <CForm>\n                    <h1>Create New Issue</h1>\n                    <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>\n                            <CIcon icon={cilBug}/>\n                        </CInputGroupText>\n                        <CFormInput\n                            placeholder=\"Error Message\"\n                            onChange={(e) => setMessage(e.target.value)}/>\n                    </CInputGroup>\n                    <CInputGroup className=\"mb-3\">\n                        <CInputGroupText>\n                            <CIcon icon={cilUser}/>\n                        </CInputGroupText>\n                        <CFormInput\n                            placeholder=\"Assign someone\"\n                            onChange={(e) => setUsername(e.target.value)}/>\n                    </CInputGroup>\n                    <CRow>\n                        <CCol xs={6}>\n                            <CButton color=\"primary\" className=\"px-4\" onClick={() => createIssue()}>\n                                Create Issue\n                            </CButton>\n                        </CCol>\n                    </CRow>\n                </CForm>\n            </CCardBody>\n        </CCard>\n    )\n}\n\nexport default NewIssue;\n","import React, {useEffect, useState} from 'react';\nimport http from \"../../../api/http\";\nimport \"antd/dist/antd.css\";\nimport \"@ant-design/pro-table/dist/table.css\";\nimport { ConfigProvider } from 'antd';\nimport enUS from 'antd/lib/locale/en_US';\nimport ProTable from '@ant-design/pro-table'\nimport Table from 'antd/lib/table'\nimport {CButton, CModal} from \"@coreui/react\";\nimport {useHistory} from \"react-router-dom\";\nimport NewIssue from \"../issue/NewIssue\";\nimport NewProject from \"./NewProject\";\nimport moment from \"moment\";\n\nconst AllProjects = () => {\n    const history = useHistory();\n    const columns = [\n        {\n            title: \"Name\",\n            dataIndex: \"name\",\n        },\n        {\n            title: \"Description\",\n            dataIndex: \"description\"\n        },\n        {\n            title: \"Source\",\n            dataIndex: \"source\",\n            copyable: true\n        },\n        {\n            title: \"Creation Time\",\n            dataIndex: \"creationTime\",\n            type: \"date\",\n            render:(date) =>\n                <div>\n                    {\n                        moment(date).format(\"MM/DD/YYYY HH:mm:ss\")\n                    }\n                </div>\n        },\n        {\n            title: \"Option\",\n            dataIndex: \"projectId\",\n            render: (projectId) =>\n                <CButton onClick={() => {\n                    history.push({pathname: \"/project/\" + projectId})\n                }}>\n                    Open\n                </CButton>\n        }\n    ];\n    const requestProjects = () => {\n        http\n            .get('/project/all')\n            .then((res)=>setData(res.data))\n    }\n\n    useEffect(()=>{\n        requestProjects()\n    },[])\n\n    const [modal, setModal] = useState(false);\n    const [data, setData] = useState([]);\n    return(\n        <div>\n            <CModal\n                visible={modal}\n                onDismiss={() => setModal(false)}>\n                <NewProject popup={true}/>\n            </CModal>\n            <CButton onClick={() => {\n                setModal(true)\n            }}>\n                New Project\n            </CButton>\n\n            <div className=\"margin-all\">\n                <strong>All Projects:</strong>\n                <Table\n                    className=\"table-striped-rows\"\n                    filterType=\"light\"\n                    size=\"small\"\n                    columns={columns}\n                    dataSource={data}\n                    rowKey=\"key\"\n                    pagination={{\n                        defaultCurrent: 10\n                    }}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default AllProjects;\n","import React from 'react'\nimport AppHeader from \"../common/header/AppHeader\";\nimport AllProjects from \"../project/AllProjects\";\nimport AppFooter from \"../common/footer/AppFooter\";\n\nconst Home = () => {\n    return (\n        <div>\n            <div className=\"wrapper d-flex flex-column min-vh-100 bg-light\">\n                <AppHeader />\n                <div className=\"body flex-grow-1 px-3\">\n                    <AllProjects/>\n                </div>\n                <AppFooter />\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n"],"sourceRoot":""}