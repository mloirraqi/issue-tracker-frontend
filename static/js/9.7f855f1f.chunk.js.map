{"version":3,"sources":["api/http.js","views/pages/project/NewProject.js"],"names":["url","http","axios","create","baseURL","paramsSerializer","params","qs","stringify","indices","interceptors","request","use","config","jwt","localStorage","getItem","undefined","headers","error","Promise","reject","response","status","this","parseError","data","messages","parseBody","console","warn","Array","CustomStyles","useHistory","useState","name","setName","description","setDescription","source","setSource","validated","setValidated","className","noValidate","onSubmit","event","preventDefault","stopPropagation","currentTarget","checkValidity","post","then","res","window","location","alert","md","type","placeholder","required","onChange","e","target","value","rows","xs","color","NewProject","popupCss","popup"],"mappings":"wIAAA,wCAGIA,EAAM,wBAONA,EAAM,wBAuBV,IAAIC,EAAOC,IAAMC,OAAO,CACpBC,QAASJ,EACTK,iBAAkB,SAAUC,GACxB,OAAOC,IAAGC,UAAUF,EAAQ,CAACG,SAAS,OAI9CR,EAAKS,aAAaC,QAAQC,KAAI,SAACC,GAC3B,IAAIC,EAAMC,aAAaC,QAAQ,OAI/B,OAHY,OAARF,QAAwBG,IAARH,IAChBD,EAAOK,QAAU,CAAC,cAAiB,UAAYJ,IAE5CD,KACR,SAAAM,GACC,OAAOC,QAAQC,OAAOF,MAG1BlB,EAAKS,aAAaY,SAASV,KAAI,SAACU,GAC5B,OA1BJ,SAAmBA,GACf,OAAwB,MAApBA,EAASC,OACFD,EAEAE,KAAKC,WAAWH,EAASI,KAAKC,UAsBlCC,CAAUN,MAClB,SAAAH,GAEC,OADAU,QAAQC,KAAK,eAAgBX,EAAMG,UAC/BH,EAAMG,UAzCMK,EA0CMR,EAAMG,UAxCpBK,aAAoBI,MACbX,QAAQC,OAAO,CAACM,SAAUA,IAE1BP,QAAQC,OAAO,CAACM,SAAU,CAACA,KAG/BP,QAAQC,OAAO,CAACM,SAAU,CAAC,eAoC3BP,QAAQC,OAAOF,GA5C9B,IAAoBQ,KAgDL1B,O,+GCxDT+B,EAAe,WACDC,cAAhB,IACA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAoBA,OACI,eAAC,IAAD,CACIC,UAAU,uBACVC,YAAU,EACVH,UAAWA,EACXI,SAxBa,SAACC,GAClBA,EAAMC,iBACND,EAAME,mBAGuB,IADhBF,EAAMG,cACVC,iBACLjD,IACKkD,KAAK,kBAAmB,CAAChB,OAAME,cAAaE,WAC5Ca,MAAK,SAACC,GACCA,EAAI3B,KACJ4B,OAAOC,SAAW,IAGlBC,MAAM,8BAItBd,GAAa,IAGb,UAMI,eAAC,IAAD,CAAMe,GAAI,GAAV,UACI,cAAC,IAAD,2BACA,cAAC,IAAD,CAAYC,KAAK,OAAOC,YAAY,gBAAgBC,UAAQ,EAACC,SAAU,SAACC,GAAD,OAAO1B,EAAQ0B,EAAEC,OAAOC,aAEnG,eAAC,IAAD,CAAMP,GAAI,GAAId,UAAW,cAAzB,UACI,cAAC,IAAD,0BACA,cAAC,IAAD,CAAee,KAAK,OACRO,KAAM,GACNN,YAAY,gGACZE,SAAU,SAACC,GAAD,OAAOxB,EAAewB,EAAEC,OAAOC,QACzCJ,UAAQ,OAExB,eAAC,IAAD,CAAMH,GAAI,GAAId,UAAW,cAAzB,UACI,cAAC,IAAD,qBACA,cAAC,IAAD,CAAYe,KAAK,OAAOC,YAAY,kBAAkBE,SAAU,SAACC,GAAD,OAAOtB,EAAUsB,EAAEC,OAAOC,aAE9F,cAAC,IAAD,CAAME,GAAI,GAAIvB,UAAW,cAAzB,SACI,cAAC,IAAD,CAASwB,MAAM,UAAUT,KAAK,SAA9B,kCA4BDU,UApBI,SAAC,GAAa,IACvBC,EADsB,EAAXC,MACS,GAAK,kBAC/B,OACI,sBAAK3B,UAAW,iCAAkC0B,EAAlD,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAMH,GAAI,GAAV,SACI,cAAC,IAAD,CAAOvB,UAAU,OAAjB,SACI,eAAC,IAAD,WACI,oDADJ,IACoC,2GAMhD,cAACX,EAAD","file":"static/js/9.7f855f1f.chunk.js","sourcesContent":["import axios from 'axios'\nimport qs from 'qs'\n\nlet url = \"http://localhost:8080\"\n\nif(process.env.NODE_ENV === 'development') {\n    url = \"http://localhost:8080\"\n}\nif(process.env.NODE_ENV === 'production') {\n    //todo: heroku url\n    url = \"http://localhost:8080\"\n}\n\nfunction parseError(messages) {\n    if (messages) {\n        if (messages instanceof Array) {\n            return Promise.reject({messages: messages})\n        } else {\n            return Promise.reject({messages: [messages]})\n        }\n    } else {\n        return Promise.reject({messages: [\"--error--\"]})\n    }\n}\n\nfunction parseBody(response) {\n    if (response.status === 200) {\n        return response\n    } else {\n        return this.parseError(response.data.messages)\n    }\n}\n\nlet http = axios.create({\n    baseURL: url,\n    paramsSerializer: function (params) {\n        return qs.stringify(params, {indices: false})\n    }\n})\n\nhttp.interceptors.request.use((config) => {\n    let jwt = localStorage.getItem(\"jwt\");\n    if (jwt !== null && jwt !== undefined) {\n        config.headers = {'Authorization': 'Bearer ' + jwt}\n    }\n    return config\n}, error => {\n    return Promise.reject(error)\n})\n\nhttp.interceptors.response.use((response) => {\n    return parseBody(response)\n}, error => {\n    console.warn('Error status', error.response)\n    if (error.response) {\n        return parseError(error.response)\n    } else {\n        return Promise.reject(error)\n    }\n})\n\nexport default http\n","import React, {useState} from 'react'\nimport {CButton, CCard, CCardBody, CCardHeader, CCol, CForm, CFormInput, CFormLabel, CRow, CFormTextarea} from '@coreui/react'\nimport http from \"../../../api/http\";\nimport {useHistory} from \"react-router-dom\";\n\nconst CustomStyles = () => {\n    const history = useHistory();\n    const [name, setName] = useState('');\n    const [description, setDescription] = useState('');\n    const [source, setSource] = useState('');\n    const [validated, setValidated] = useState(false)\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        event.stopPropagation()\n\n        const form = event.currentTarget\n        if (form.checkValidity() !== false) {\n            http\n                .post('/project/create', {name, description, source})\n                .then((res) => {\n                    if (res.data) {\n                        window.location = \"/\";\n                        //history.push(\"/\");\n                    } else {\n                        alert(\"Project Creation Failed\")\n                    }\n                })\n        }\n        setValidated(true)\n    }\n    return (\n        <CForm\n            className=\"row needs-validation\"\n            noValidate\n            validated={validated}\n            onSubmit={handleSubmit}\n        >\n            <CCol md={12}>\n                <CFormLabel>Project Name</CFormLabel>\n                <CFormInput type=\"text\" placeholder=\"Issue Tracker\" required onChange={(e) => setName(e.target.value)}/>\n            </CCol>\n            <CCol md={12} className={\"btn-padding\"}>\n                <CFormLabel>Description</CFormLabel>\n                <CFormTextarea type=\"text\"\n                            rows={10}\n                            placeholder=\"Issue Tracker let's you track project related issues. Developed with React.js and Spring Boot\"\n                            onChange={(e) => setDescription(e.target.value)}\n                            required/>\n            </CCol>\n            <CCol md={12} className={\"btn-padding\"}>\n                <CFormLabel>Source</CFormLabel>\n                <CFormInput type=\"text\" placeholder=\"www.github.com/\" onChange={(e) => setSource(e.target.value)}/>\n            </CCol>\n            <CCol xs={12} className={\"btn-padding\"}>\n                <CButton color=\"primary\" type=\"submit\">\n                    Create Project\n                </CButton>\n            </CCol>\n        </CForm>\n    )\n}\n\nconst NewProject = ({popup}) => {\n    const popupCss = popup ?  \"\" : \"right-new-issue\"\n    return (\n        <div className={\"align-items-center margin-new \" +popupCss}>\n            <CRow>\n                <CCol xs={12}>\n                    <CCard className=\"mb-4\">\n                        <CCardHeader>\n                            <strong>Create Project</strong> <small>To get started with a new project, simply fill up the\n                            details</small>\n                        </CCardHeader>\n                    </CCard>\n                </CCol>\n            </CRow>\n            <CustomStyles/>\n        </div>\n\n    )\n}\n\nexport default NewProject\n"],"sourceRoot":""}